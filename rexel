-- Rexel 1.4.0 Interpreter (Full Version)

-- Import system (for custom modules)
function import(module_name)
    local path = "/usr/local/share/rexel/libs/" .. module_name .. ".rx"
    local file = io.open(path, "r")
    if not file then
        error("Module not found: " .. module_name)
    end
    local code = file:read("*a")
    file:close()
    load(code)()
end

-- File I/O Functions
function readFile(filename)
    local file = io.open(filename, "r")
    if not file then
        error("Unable to read file: " .. filename)
    end
    local content = file:read("*a")
    file:close()
    return content
end

function writeFile(filename, content)
    local file = io.open(filename, "w")
    if not file then
        error("Unable to write to file: " .. filename)
    end
    file:write(content)
    file:close()
end

-- Threading support using LuaLanes (install via luarocks)
local lanes = require "lanes".configure()

function run_parallel(funcs)
    local threads = {}
    for _, func in ipairs(funcs) do
        table.insert(threads, lanes.gen("*", func))
    end
    -- Wait for threads to finish
    for _, thread in ipairs(threads) do
        thread()
    end
end

-- Enhanced error recovery
function try(func)
    local success, result = pcall(func)
    if not success then
        print("Error occurred: " .. result)
        -- Fallback behavior
        return nil
    end
    return result
end

-- Run external commands (run command)
function run(command, ...)
    local args = {...}
    local cmd = command .. " " .. table.concat(args, " ")
    os.execute(cmd)
end

-- Debugging utility
function debug_variable(var)
    print("Variable Value: " .. tostring(var))
end

-- Basic Hash Map Implementation
local function create_map()
    local map = {}
    function map:set(key, value)
        self[key] = value
    end
    function map:get(key)
        return self[key]
    end
    return map
end

-- Set Implementation
local function create_set()
    local set = {}
    function set:add(value)
        self[value] = true
    end
    function set:contains(value)
        return self[value] ~= nil
    end
    return set
end

-- Example usage of file I/O, threading, and run command
writeFile("output.txt", "Hello from Rexel!")
local content = readFile("output.txt")
print(content)

run("ls", "-l", "/home")

run_parallel({
    function() print("Task 1") end,
    function() print("Task 2") end,
    function() print("Task 3") end,
})

-- REPL Function
function repl()
    while true do
        io.write("Rexel> ")
        local input = io.read()
        if input == "exit" then break end
        local func, err = load(input)
        if not func then
            print("Error: " .. err)
        else
            local success, result = pcall(func)
            if success then
                print(result)
            else
                print("Runtime Error: " .. result)
            end
        end
    end
end

-- Start the REPL
repl()
