-- Rexel Interpreter in Lua with Classes

-- RexelInterpreter Table (acting as a class)
RexelInterpreter = {}
RexelInterpreter.__index = RexelInterpreter

-- Constructor for RexelInterpreter
function RexelInterpreter:new()
    local obj = {
        variables = {},
        functions = {},
        output = {},
        classes = {}
    }
    setmetatable(obj, RexelInterpreter)
    return obj
end

-- Parse the Rexel code
function RexelInterpreter:parse(code)
    local statements = {}
    for line in code:gmatch("[^\r\n]+") do
        table.insert(statements, line:match("^%s*(.-)%s*$"))
    end
    for _, statement in ipairs(statements) do
        self:execute(statement)
    end
end

-- Execute a statement based on its structure
function RexelInterpreter:execute(statement)
    if statement:find("=>") then
        self:handle_function(statement)
    elseif statement:find("do-this-if") then
        self:handle_inline_condition(statement)
    elseif statement:find("|>") then
        self:handle_iteration(statement)
    elseif statement:find("class") then
        self:handle_class(statement)
    elseif statement:find("new") then
        self:handle_new_object(statement)
    else
        self:handle_assignment(statement)
    end
end

-- Handle function definitions
function RexelInterpreter:handle_function(statement)
    local func_name, func_body = statement:match("^(%w+)%s*=>%s*(.+)$")
    self.functions[func_name] = func_body
end

-- Handle inline conditional statements
function RexelInterpreter:handle_inline_condition(statement)
    local condition, action = statement:match("^(.-)%s*do%-this%-if%s*(.+)$")
    if load("return " .. condition)() then
        table.insert(self.output, action)
    end
end

-- Handle iteration using the |> operator
function RexelInterpreter:handle_iteration(statement)
    local arr_str, action = statement:match("^(.-)%s*|>%s*(.+)$")
    local arr = load("return " .. arr_str)()
    for _, item in ipairs(arr) do
        table.insert(self.output, action .. " " .. tostring(item))
    end
end

-- Handle class definitions
function RexelInterpreter:handle_class(statement)
    local class_name, class_body = statement:match("^class%s+(%w+)%s*{(.*)}$")
    local class = {}
    class.__index = class

    -- Parse and define methods within the class
    for method_name, method_body in class_body:gmatch("(%w+)%s*=>%s*(.+)") do
        class[method_name] = load("return function(self) return " .. method_body .. " end")()
    end

    self.classes[class_name] = class
end

-- Handle object creation
function RexelInterpreter:handle_new_object(statement)
    local class_name, obj_name = statement:match("^new%s+(%w+)%s+as%s+(%w+)$")
    local class = self.classes[class_name]
    if class then
        local obj = setmetatable({}, class)
        self.variables[obj_name] = obj
    else
        error("Class " .. class_name .. " not defined.")
    end
end

-- Handle variable assignments
function RexelInterpreter:handle_assignment(statement)
    for var_name, value in statement:gmatch("([^,=]+)%s*=%s*(.-)%s*") do
        self.variables[var_name] = load("return " .. value)()
    end
end

-- Print output after execution
function RexelInterpreter:print_output()
    for _, line in ipairs(self.output) do
        print(line)
    end
end
